"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = _interopRequire(require("react"));

var Chartist = _interopRequire(require("chartist"));

var classnames = _interopRequire(require("classnames"));

var identity = function (x) {
  return x;
};

var Chart = (function (_React$Component) {
  function Chart(props) {
    _classCallCheck(this, Chart);

    _React$Component.call(this, props);

    this.state = {
      datapoint: {
        name: "",
        value: "" },
      tooltip: {
        top: 0,
        left: 0
      }
    };

    this.onMouseOver = this.onMouseOver.bind(this);
  }

  _inherits(Chart, _React$Component);

  Chart.prototype.componentDidMount = function componentDidMount() {
    this.updateChart(this.props);
  };

  Chart.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {
    this.updateChart(newProps);
  };

  Chart.prototype.componentWillUnmount = function componentWillUnmount() {
    this.chartist.detach();
  };

  Chart.prototype.render = function render() {
    var props = this.props,
        state = this.state;

    return React.createElement(
      "div",
      { style: {
          position: "relative"
        } },
      React.createElement("div", { ref: "chart",
        className: classnames("ct-chart", props.classnames),
        style: props.style,
        onMouseOver: this.onMouseOver }),
      React.createElement(
        "div",
        { ref: "tooltip",
          className: ["ct-tooltip", state.tooltip.classname].join(" ").trim(),
          style: {
            position: "absolute",
            top: state.tooltip.top,
            left: state.tooltip.left,
            padding: "0.25rem 1rem",
            border: "1px #fff solid",
            textAlign: "center",
            fontSize: 12,
            lineHeight: 1.4,
            color: "#fff",
            opacity: 0.75
          } },
        React.createElement(
          "div",
          { className: "ct-tooltip-name" },
          (props.tooltip.transform.name || identity)(state.datapoint.name)
        ),
        React.createElement(
          "div",
          { className: "ct-tooltip-value" },
          (props.tooltip.transform.value || identity)(state.datapoint.value)
        )
      )
    );
  };

  Chart.prototype.updateChart = function updateChart(props) {
    var _this = this;

    var type = props.type;
    var data = props.data;
    var options = props.options;
    var responsiveOptions = props.responsiveOptions;
    var events = props.events;
    var create = function () {
      _this.chartist = new Chartist[type](React.findDOMNode(_this.refs.chart), data, options, responsiveOptions);

      Object.keys(events).forEach(function (x) {
        return _this.chartist.on(x, events[x].bind(_this.chartist));
      });
    };

    this.chartist ? this.chartist.update(data, options, true) : data.series ? create() : null;
  };

  Chart.prototype.onMouseOver = function onMouseOver(_ref) {
    var target = _ref.target;

    var $parent = target.parentNode;

    var targetRect = target.getBoundingClientRect(),
        chartRect = React.findDOMNode(this.refs.chart).getBoundingClientRect(),
        tooltipRect = React.findDOMNode(this.refs.tooltip).getBoundingClientRect(),
        name = $parent.attributes["ct:series-name"],
        value = target.attributes["ct:value"];

    value && this.setState({
      datapoint: {
        name: name ? name.value : "",
        value: value.value
      },
      tooltip: {
        classname: "ct-tooltip-" + $parent.classList[1].substr(3),
        top: targetRect.top - chartRect.top - tooltipRect.height,
        left: targetRect.left - chartRect.left - 1
      }
    });
  };

  return Chart;
})(React.Component);

module.exports = Chart;

Chart.propTypes = {
  type: React.PropTypes.string.isRequired,
  classnames: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object]),
  style: React.PropTypes.object,
  data: React.PropTypes.shape({
    labels: React.PropTypes.array,
    series: React.PropTypes.array
  }),
  options: React.PropTypes.object,
  responsiveOptions: React.PropTypes.array,
  events: React.PropTypes.object,
  tooltip: React.PropTypes.shape({
    transform: React.PropTypes.shape({
      name: React.PropTypes.func,
      value: React.PropTypes.func
    })
  })
};

Chart.defaultProps = {
  style: {},
  options: {},
  responsiveOptions: [],
  events: {},
  tooltip: {
    transform: {
      name: identity,
      value: identity
    }
  }
};